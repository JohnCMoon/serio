#!/usr/bin/env python

# upload/download files to an embedded Linux system via a serial port shell

# serio - program to copy files via a serial device
#
# Copyright (C) 2011, 2012 heffnercj, cheffnera
#    https://code.google.com/archive/p/serio/source/default/commits
#
# Copyright (C) 2016, 2017 Frank Rowand
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import re
import serial
import sys, os.path, math, time
import hashlib
import StringIO
import uu
from getopt import GetoptError, getopt as GetOpt
import glob
import stat

# verbose
#  1  bytes uploaded/downloaded
#  2  progress
verbose = 0

# zero always will mean no checksum
CHECKSUM_NONE   = 0
CHECKSUM_MD5SUM = 1

class ParseMinicom:

	PATH = "/etc/minicom/"
	PREFIX = "minirc."
	CONF = {'baudrate' : None, 'port' : None}

	def __init__(self, name):
		path = self.PATH + self.PREFIX + name
		
		for line in open(path).readlines():
			for key,value in self.CONF.iteritems():
				if line.startswith('pu ' + key):
					self.CONF[key] = line.split(key)[1].strip()

	def setting(self, name):
		if self.CONF.has_key(name):
			return self.CONF[name]
		else:
			return None

	def baudrate(self):
		return self.setting('baudrate')

	def port(self):
		return self.setting('port')

class RemoteExecute:

	# value of DELIM split into multiple parts so that this file
	# can be transferred by serio without triggering end of read
	DELIM          = '[[&&' + 'serio_cmd_done' + '&&]]'
	DATA_PER_WRITE = 100
	PRINT_INTERVAL = 256

	def __init__(self, fp):
		global verbose
		if callable(fp.read) and callable(fp.write) and callable(fp.readline) and callable (fp.readlines):
			self.fp           = fp
			self.current      = 0
			self.showprogress = verbose > 1
			self.last_size    = 0
		else:
			raise Exception("bad fp object!")

	def progress(self, current, total):
		
		if not self.showprogress:
			return

		if current > total:
			current = total

		if self.last_size == 0 or current == total or (current - self.last_size) >= self.PRINT_INTERVAL:
			if total == 0:
				percent = 1
			else:
				percent = (current / float(total)) * 100
			marks      = int(math.floor(percent / 2))
			markstring = "#" * marks
			dotstring  = "." * (50 - marks)
			sys.stdout.write("\r[%s%s] %0.2f%% (%d / %d)" % (markstring, dotstring, percent, current, total))
			sys.stdout.flush()
			self.last_size = current

	def readuntil(self, count=None, lines=None, delim=None):
		# FIXME - consider implications of read timeout
		#         - case count will return fewer bytes than requested
		#         - case count will return fewer lines than requested
		#         - case delim will spin forever
		#         Should timeout be detected and set a different
		#         exit code?

		data = ""

		if count is not None:

			for i in range(0, count):
				data += self.fp.read(1)
				self.progress(len(data), count)

		elif lines is not None:

			for i in range(0, lines):
				data += self.fp.readline()
				self.progress(len(data), len(data))

		elif delim is not None:

			while not data.endswith(delim):
				data += self.serial.read(1)
				self.progress((len(data)-len(delim)), (len(data)-len(delim)))

			data = data[0:-len(delim)]
			# FIXME - all users of delim do this fix after calling readuntil(),
			#         consider moving it here:
			#            consume '\n' leftover from readuntil()
			#            self.fp.readline()
	
		self.progress(len(data), len(data))
		if self.showprogress > 0:
			print
		return data

	def prime_before_first_execute(self):
		# required after this program begins,
		# before first call of execute()

		cmd = "#"
		self.fp.write(cmd + "\n")

		# remote system shell echos command, slurp it up
		cmd_echo = self.fp.readline()

		### FIXME - this readline() should not be needed if the
		### 'Try to synch up' is done here
		## There probably will not be a prompt, becuase the remote
		## shell probably sent it before serio started execution.
		## Check for the command with carriage return, newline.
		## If the echoed command does not include this then
		## repeat the readline().
		##
		#if not cmd_echo.endswith(cmd + "\r\n"):
		#	cmd_echo = self.fp.readline()

		# If serio is run quickly back to back then there might be
		# some remaining cruft to clear out.  This problem was
		# detected with:
		#    for k in `seq 1 10` ; do serio -p -s file_1 -y /dev/ttyACM2 ; serio -p -s file_1 -y /dev/ttyACM2 ; done
		# The resulting error is: ERROR: invalid literal for int() with base 10: "root@beaglebone:~# [ -d '.' ] ; echo $? \r\n"
		#
		# Try to synch up
		# Need to split DELIM into separate parts so that readuntil() will
		# not stop when it sees the entire value in the command line.
		self.execute("echo '%s''%s'" % (self.DELIM[0:1], self.DELIM[1:]))
		data = self.readuntil(delim=self.DELIM)
		# consume '\n' leftover from readuntil()
		self.fp.readline()


	def execute(self, cmd):
		# This program MUST send a newline to the remote system once
		# before calling a sequence of execute() so that the data
		# read by readline() will include a shell prompt.  This is
		# accomplished by calling prime_before_first_execute() before
		# a series of calls to execute().

		self.fp.write(cmd + "\n")

		# remote system shell echos command, slurp it up
		cmd_echo = self.fp.readline()

		# WARNING: this will not work if the prompt is 0 bytes long
		#
		# If a command is sent to the remote system  shell before
		# the shell has issued a prompt then the shell will echo
		# the command (including the newline that will cause a
		# readline() to complete).  When the shell is ready to read
		# the next command it will print the prompt and once again
		# echo the command.
		#
		# If the echoed command does not include the prompt then
		# repeat the readline().
		#
		# FIXME - this does not work for remote shell: busybox sh
		if cmd_echo == cmd + "\r\n":
			cmd_echo = self.fp.readline()

	def getfile(self, filename):

		if self.basic:
			self.execute("cat '%s' && echo '%s'" % (filename, self.DELIM))
			data = self.readuntil(delim=self.DELIM)
			# consume '\n' leftover from readuntil()
			self.fp.readline()

			# Catting data over a terminal turns all \n's to \r\n's
			data = data.replace("\r\n", "\n")

			mode = -1
			return mode, data

		else:
			if self.checksum == CHECKSUM_MD5SUM:

				self.execute("stat -c %%s '%s'" % (filename))
				data = self.fp.readline()
				file_size = int(data)

				self.execute("md5sum '%s'" % (filename))
				md5sum = self.fp.readline()

			self.execute("uuencode '%s' /dev/stdout" % (filename))
			data = self.readuntil(delim="end")
			# consume '\n' leftover from readuntil()
			self.fp.readline()

			# be careful about format of uuencode header

			match = re.search("\n", data)
			if match:
				full_header = data[0:match.start() - 1]
			else:
				full_header = data

			match = re.match("begin +[0-9]*", data)
			if match:
				header = data[match.start():match.end()]
				header = re.sub("^begin ", "", header, 1)
				header = re.sub(" +.*","", header)
				if not re.match("[0-9]+", header):
					raise Exception("invalid uuencode header: " + full_header)
			else:
				raise Exception("invalid uuencode header: " + full_header)

			mode = int(header, 8)

			infile  = StringIO.StringIO(data + "end")
			outfile = StringIO.StringIO()
			uu.decode(infile,outfile)

			if self.checksum == CHECKSUM_MD5SUM:
				if hashlib.md5(outfile.getvalue()).hexdigest() != md5sum[0:32]:
					raise Exception("md5sum of dest != source")

				if len(outfile.getvalue()) != file_size:
					raise Exception("size of dest != source")

			return mode, outfile.getvalue()


	def put_file(self, name, destination):
		global verbose

		self.execute("[ -d '%s' ] ; echo $? " % destination)
		status = self.fp.readline()
		if (int(status) == 0):
			filename = destination + '/' + os.path.basename(name)
		else:
			filename = destination
		local_file = open(name, "rb")
		data       = local_file.read()
		sent       = 0
		data_size  = len(data)

		# Create/zero the file
		self.execute('echo -ne > %s' % filename)

		# Disable shell echo
		# Echoing the data doubles the time required to put the file.
		self.fp.write('stty -echo\n')

		# do not wait when trying to consume prompt
		saved_timeout = self.fp.timeout
		self.fp.timeout = 0
		# FIXME - hack for beaglebone black angstrom
		# self.fp.timeout = 0.01

		# --------------------  self.execute() will NOT work after this point
		#                       until after 'stty echo'

		# Loop through all the bytes in the source data and append them
		# to the destination file.  Limit size of data in the echo
		# command to DATA_PER_WRITE characters.
		while sent < data_size:
			line_size = 0
			dpart = ''

			while line_size < self.DATA_PER_WRITE and sent < data_size:
				data_i = data[sent]
				odata = ord(data_i)
				if 'a' <= data_i <= 'z' or 'A' <= data_i <= 'Z' or '0' <= data_i <= '9':
					dpart += data_i
					line_size += 1
				else:
					if line_size + 5 > self.DATA_PER_WRITE:
						break
					dpart += '\\x%.2X' % int(odata)
					line_size += 5
				sent += 1

			self.fp.write('echo -ne \"%s\" >> %s\n' % (dpart, filename))

			# consume prompt, best effort
			# any trailing data will get swept up in the synch
			# at 'Try to synch up'
			# FIXME - arbitrary data size
			self.fp.read(1000)

			# Show upload status
			self.progress(sent, data_size)

		if self.showprogress:
			print

		# enable shell echo
		self.fp.write('\n')
		self.fp.write('stty echo\n')
		self.fp.write('\n')

		self.fp.timeout = saved_timeout

		# --------------------  self.execute() will work after this point

		# Try to synch up
		# Need to split DELIM into separate parts so that readuntil() will
		# not stop when it sees the entire value in the command line.
		self.execute("echo '%s''%s'" % (self.DELIM[0:1], self.DELIM[1:]))
		data = self.readuntil(delim=self.DELIM)
		# consume '\n' leftover from readuntil()
		self.fp.readline()

		local_file.close()

		mode = oct(stat.S_IMODE(os.stat(name).st_mode))
		# FIXME - check for chmod error
		self.execute("chmod '%s' '%s' 2> /dev/null" % (mode, destination))
		if verbose > 0:
			print 'Uploaded %d bytes from %s to %s' % (sent, name, destination)

	def close(self):
		self.fp.close()

	def cmd(self, cmd_str, remote_shell=None, timeout=None):

		if remote_shell:
			# FIXME - add option to choose what shell to use
			#         have minimally tested sh and bash
			#
			# FIXME - remote_cmd works ok if the remote shell that executes
			#         remote_cmd is bash, but not if the remote shell that
			#         executes remote_cmd is busybox sh.
			#         This appears to be due to sh echoing a '\n' when the
			#         input line is too long due to a large prompt.A
			#         For example, if PS1='\w \$ ', and in the directory
			#         /usr/data/frowand/tmp, then when remote_cmd is:
			#             sh -c 'ls .' ; r=$?; echo '[[&&serio_cmd_done&&]]'; echo ${r}
			#         sh splits the input with a '\n' before ' ${r}'
			#
			remote_cmd = "sh -c \'" + cmd_str + "\' ; r=$?; echo '%s'; echo ${r}" % self.DELIM
		else:
			remote_cmd = cmd_str + " ; echo '%s'\n" % self.DELIM
		self.execute(remote_cmd)

		# should do this in a thread so we can output while
		# the data is coming back
		result = self.readuntil(None, None, self.DELIM)
		# consume '\n' leftover from readuntil()
		self.fp.readline()

		if remote_shell:
			remote_status = self.fp.readline()
			remote_status = remote_status.replace("\r\n", "")
		else:
			remote_status = 0

		# Sending output over a terminal turns all \n's to \r\n's
		result = result.replace("\r\n", "\n")
		return remote_status, result

	def recursive_put(self, src_dir, dst_dir):
		head, tail = os.path.split(src_dir)
		dest = dst_dir + '/' + tail
		self.execute("mkdir -p '%s' 2> /dev/null" % dest)
		self.execute("[ -d '%s' ] ; echo $? " % dest)
		data = self.fp.readline()
		if (int(data) != 0):
			raise Exception("unable to create remote directory '%s': " %dest + data)
		# FIXME - need to set permissions on dir

		for dirpath, dirs, files in os.walk(src_dir, followlinks=True):

			for dir in dirs:
				dst_path = dst_dir + '/' + dirpath + '/' + dir
				self.execute("mkdir -p '%s' 2> /dev/null" % dst_path)
				self.execute("[ -d '%s' ] ; echo $? " % dst_path)
				data = self.fp.readline()
				if (int(data) != 0):
					raise Exception("unable to create remote directory '%s': " % dst_path + data)
				# FIXME - need to set permissions on dir

			for file in files:
				dst_path = dst_dir + '/' + dirpath + '/' + file
				src_path = dirpath + '/' + file
				size = self.put_file(src_path, dst_path)


class SerialTerminal(RemoteExecute):

	def __init__(self, basic, checksum, port, baudrate, timeout):
		self.basic    = basic
		self.checksum = checksum
		self.serial   = serial.Serial(port=port, baudrate=baudrate, timeout=timeout)
		already_open  = self.serial.isOpen()
		if not already_open:
			self.serial.open()
		RemoteExecute.__init__(self, fp=self.serial)


def usage():
	print '\nUsage: %s [OPTIONS]' % os.path.basename(sys.argv[0])
	print '''
   -b, --baudrate=<baud>           Serial port baud rate [115200]
   -B, --basic                     Use basic (minimal) remote system commands
   -d, --destination=<file path>   Path to destination file
   -g, --get                       Get a file from the remote system
   -h, --help                      Show help
   -p, --put                       Put a file to the remote system
   -c, --cmd="command with args"   Execute a command on the remote system
   -M, --md5sum                    verify file transfer with md5sum
   -m, --minicom=<name>            Name of the minicom config file to use
   -N, --no-remote-shell           Do not invoke a remote shell to execute --cmd
   -r, --recurse                   Recursively copy directories
   -s, --source=<file path>        Path to source file
   -T, --timeout=<seconds>         Set read timout on the serial port (float)
   -v, --verbose                   Print more information (cumulative)
   -y, --port=<serial port>        Serial port to use [/dev/ttyUSB0]

Notes:
    - Behaviour of a list of --source files and of --recurse are intended to
      be as consistent as possible with scp.
      FIXME - default of scp is verbose, list of files is silenced by '-q'
              serio is the opposite
    - Put 'file path' in double quotes when multiple files are transferred
      This is different syntax than scp and will change if scp style source
      and destination is implemented.
    - --timeout is a big stick.  Setting <seconds> to a small value will result
      in errors or unstable behaviour.  For --cmd, <seconds> must be long
      enough to allow the entire command to be echoed.

Side-effects:
  --put --basic
    - shell echo will be enabled on remote system (stty echo)
    - if exception occurs, shell echo may be disabled on
      remote system (remote system can be fixed with command
      "stty echo")

Remote System Dependencies:
  - May hang if the shell prompt is zero bytes long
  - Remote system shell echos \\r\\n at end of command input
  - Remote system shell built-ins or programs:
    --get --basic  :  cat, echo
    --get          :                uuencode
    --get --md5sum :  stat, md5sum, uuencode
    --put          :  stty, echo

Known Problems:
  - file copy (--get and --put)
    - the entire file is copied into memory before being written out.
  - execute a command (--cmd)
    - will hang for command "bash"
    - will hang for command "exit" (exiting bash)
    - can not be used to login to a shell

Return:
  If --cmd and --remote-shell then the exit status of the remote shell.
  Otherwise:
     0  no error
     1  --help or argument error
     2  --put error
     3  --get error

	'''


def main():

	global verbose

	exit_status = 0

	action       = None
	basic        = None
	baudrate     = 115200
	checksum     = CHECKSUM_NONE
	destination  = None
	timeout      = None
	minicom      = None
	port         = '/dev/ttyUSB0'
	recurse      = None
	remote_shell = 1
	source       = None

	try:
		opts, args = GetOpt(sys.argv[1:],
				    'b:Bc:d:ghMNm:prs:T:vy:',
				    ['baudrate=',
				     'basic',
				     'cmd=',
				     'destination=',
				     'get',
				     'help',
				     'md5sum',
				     'no-remote-shell',
				     'minicom=',
				     'put',
				     'recurse',
				     'source=',
				     'timeout=',
				     'verbose',
				     'port=',
				    ]
				   )
	except GetoptError, e:
		print 'Usage error:', e
		print 'Help available via: \'%s -h\'' % os.path.basename(sys.argv[0])
		sys.exit(1)

	for opt, arg in opts:
		if opt in ('-b', '--baudrate'):
			baudrate = arg
		elif opt in ('-B', '--basic'):
			basic = 1
		elif opt in ('-c', '--cmd'):
			action = 'cmd'
			cmd_str = arg
		elif opt in ('-d', '--destination'):
			destination = arg
		elif opt in ('-g', '--get'):
			action = 'get'
		elif opt in ('-h', '--help'):
			usage()
			sys.exit(1)
		elif opt in ('-M', '--md5sum'):
			checksum = CHECKSUM_MD5SUM
		elif opt in ('-m', '--minicom'):
			minicom = ParseMinicom(arg)
		elif opt in ('-p', '--put'):
			action = 'put'
		elif opt in ('-N', '--no-remote-shell'):
			remote_shell = 0
		elif opt in ('-r', '--recurse'):
			recurse = 1
		elif opt in ('-s', '--source'):
			source = arg
		elif opt in ('-T', '--timeout'):
			timeout = float(arg)
		elif opt in ('-v', '--verbose'):
			verbose += 1
		elif opt in ('-y', '--port'):
			port = arg

	if action is None:
		print 'ERROR: must specify an action option'
		print '   --cmd'
		print '   --get'
		print '   --put'
		sys.exit(1)

	if action in ['get','put']:
		if not source:
			print 'ERROR: must specify the -s option'
			sys.exit(1)

		# FIXME - add alternate syntax for '-s' and '-d':
		#         serio {-g | -p} source ... destination

		if destination is None:
			destination = "."

	if minicom is not None:
		port     = minicom.port()
		baudrate = minicom.baudrate()

	if timeout == 0:

		# FIXME - add test for minimum reasonable value based on baud
		#         rate (and maybe length of command).
		#         execute() must have enough time to be able
		#         to readline() the echoed command.
		#
		# FIXME - --timeout is a big hammer when used as a global
		#           timeout.  Consider using timeout() to vary
		#           the value at various points of this program.  For
		#           example, the value while in execute() could be
		#           adjusted upwards to account for the length of the
		#           command string passed for each specific call to
		#           execute().  [[ sterm.fp.timeout ]]

		print 'ERROR: "--timeout 0" will result in incorrect behaviour'
		sys.exit(1)

	sterm = SerialTerminal(basic, checksum, port, baudrate, timeout)

	# required before calls to execute()
	sterm.prime_before_first_execute()

	if action == 'put':
		try:

			# FIXME - source.split() does not handle space inside
			#         name, even if name is in quotes or space is
			#         '\' delimited

			# if multiple sources then destination must be a directory

			names = 0
			directories = 0
			for name in source.split():
				# FIXME - glob.glob() not needed if switch to scp
				#         source and dest style.  In that case, the
				#         shell will handle wild card expansion.  Same
				#         for second use of glob.glob() below.
				for name_glob in glob.glob(name):
					names += 1
					if os.path.isdir(name):
						directories += 1

			if names > 1 or directories:

				sterm.execute('[ ! -e "%s" ] ; echo $?' % destination)
				status = sterm.fp.readline()
				if int(status) == 0:
					raise Exception(destination + ": No such file or directory")

				sterm.execute('[ ! -d "%s" ] ; echo $?' % destination)
				status = sterm.fp.readline()
				if int(status) == 0:
					raise Exception(destination + ": Not a directory")

			for name in source.split():
				for name_glob in glob.glob(name):

					if os.path.isdir(name_glob):

						if recurse:
							sterm.recursive_put(name_glob, destination)
						else:
							# follow scp behaviour, do not raise exception
							print 'ERROR: ' + name_glob + ': not a regular file'

					elif os.path.isfile(name_glob):
						sterm.put_file(name_glob, destination)

		except Exception, e:
			# FIXME - scp prefixes with 'scp' instead of ERROR
			print "ERROR:", e
			sys.exit(2)

	elif action == 'get':
		try:
			mode, data = sterm.getfile(source)
			if len(data):
				open(destination, "wb").write(data)
				if mode != -1:
					os.chmod(destination, mode)

			if verbose > 0:
				print 'Downloaded %d bytes from %s to %s' % (len(data), source, destination)
		except Exception, e:
			print "\nERROR:", e
			sys.exit(3)

	elif action == 'cmd':
		try:
			remote_status, data = sterm.cmd(cmd_str, remote_shell)
			exit_status = remote_status
			if len(data):
				print data
		except Exception, e:
			print "ERROR:", e

	else:
		print "ERROR: unknown action '%s'" % action
			
	sterm.close()

	sys.exit(int(exit_status))


if __name__ == '__main__':
	main()


# ex: set ts=8 sw=8 sts=8 noet :
